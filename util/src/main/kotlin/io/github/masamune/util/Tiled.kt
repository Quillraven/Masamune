package io.github.masamune.util

import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import java.io.File

@Serializable
data class PropertyType(
    val id: Int,
    val name: String,
    val type: String,
    val values: List<String> = emptyList()
)

@Serializable
data class TiledProject(
    val propertyTypes: List<PropertyType>,
)

fun main() {
    val file = File("../masamune-tiled.tiled-project")

    println("Reading file ${file.name}")
    val jsonStr = file.readText()

    println("Parsing Json content")
    val json = Json {
        ignoreUnknownKeys = true
    }
    val tiledProject = json.decodeFromString<TiledProject>(jsonStr)

    println("Generating enums")
    tiledProject.propertyTypes
        .filter { it.type == "enum" && it.values.isNotEmpty() }
        .forEach { createEnum(it.name, it.values) }
}

fun createEnum(name: String, values: List<String>) {
    // map of 'tiled enum name' to 'kotlin class name'
    // if map does not contain the tiled name then nothing will be generated
    val supportedEnums = mapOf(
        "MapObjectType" to "TiledObjectType"
    )
    val enumName = supportedEnums[name] ?: return

    println("Creating enum $enumName with values $values")
    val enumTargetPackage = "io/github/masamune/tiledmap"
    val enumFile = File("../core/src/main/kotlin/$enumTargetPackage/$enumName.kt")
    if (enumFile.exists()) {
        enumFile.delete()
    }
    enumFile.createNewFile()

    val content = buildString {
        val newLine = System.lineSeparator()
        append("package io.github.masamune.tiledmap").append(newLine).append(newLine)
        append("// This is an autogenerated class by gradle's 'genTiledEnums' task. Do not touch it!").append(newLine)
        append("enum class $enumName {").append(newLine)
        append(values.sorted().joinToString(separator = ",$newLine    ", prefix = "    ")).append(newLine)
        append("}").append(newLine)
    }

    enumFile.writeText(content)
}
